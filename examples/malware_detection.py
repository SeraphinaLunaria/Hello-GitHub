#!/usr/bin/env python3
"""
Basic Malware Detection Tool
Educational tool demonstrating malware detection techniques
Uses signature-based and heuristic analysis
"""

import os
import hashlib
import re
import zipfile
import magic
from pathlib import Path
from datetime import datetime


class MalwareDetector:
    """Detect potentially malicious files"""

    def __init__(self):
        self.detections = []
        self.scanned_files = 0

        # Simulated malware signatures (MD5 hashes)
        # In production, use proper threat intelligence feeds
        self.malware_signatures = {
            '44d88612fea8a8f36de82e1278abb02f': 'EICAR Test File',
            'c99a...': 'Example malware family',
        }

        # Suspicious patterns
        self.suspicious_patterns = {
            r'eval\s*\(': 'Code execution via eval()',
            r'exec\s*\(': 'Code execution via exec()',
            r'__import__\s*\(': 'Dynamic import',
            r'subprocess\.(call|run|Popen)': 'System command execution',
            r'os\.system': 'System command execution',
            r'base64\.b64decode': 'Base64 decoding (possible obfuscation)',
            r'socket\.socket': 'Network socket creation',
            r'requests\.(get|post).*http': 'HTTP requests',
            r'pickle\.loads': 'Pickle deserialization (unsafe)',
            r'input\s*\(.*password': 'Password prompt (potential credential theft)',
        }

        # Suspicious file names
        self.suspicious_names = [
            r'.*\.exe\..*',  # Double extension
            r'.*\.(scr|pif|bat|cmd|vbs)$',  # Suspicious extensions
            r'^\..*',  # Hidden files
            r'.*keylog.*',
            r'.*backdoor.*',
            r'.*exploit.*',
            r'.*payload.*',
        ]

        # Entropy threshold for detecting encryption/packing
        self.entropy_threshold = 7.0

    def calculate_file_hash(self, filepath):
        """Calculate MD5 and SHA256 hashes of file"""
        md5_hash = hashlib.md5()
        sha256_hash = hashlib.sha256()

        try:
            with open(filepath, "rb") as f:
                for byte_block in iter(lambda: f.read(4096), b""):
                    md5_hash.update(byte_block)
                    sha256_hash.update(byte_block)

            return md5_hash.hexdigest(), sha256_hash.hexdigest()

        except Exception as e:
            return None, None

    def calculate_entropy(self, data):
        """Calculate Shannon entropy of data"""
        if not data:
            return 0

        entropy = 0
        for x in range(256):
            p_x = data.count(bytes([x])) / len(data)
            if p_x > 0:
                entropy += - p_x * (p_x.bit_length() - 1)

        return entropy

    def check_signature(self, filepath):
        """Check file against malware signatures"""
        md5_hash, sha256_hash = self.calculate_file_hash(filepath)

        if md5_hash in self.malware_signatures:
            return True, f"Known malware: {self.malware_signatures[md5_hash]}"

        return False, None

    def check_filename(self, filepath):
        """Check for suspicious filename patterns"""
        filename = os.path.basename(filepath)

        for pattern in self.suspicious_names:
            if re.match(pattern, filename, re.IGNORECASE):
                return True, f"Suspicious filename pattern: {pattern}"

        return False, None

    def check_file_content(self, filepath):
        """Analyze file content for suspicious patterns"""
        try:
            # Try to read as text
            with open(filepath, 'r', encoding='utf-8', errors='ignore') as f:
                content = f.read(10000)  # Read first 10KB

            detections = []

            for pattern, description in self.suspicious_patterns.items():
                matches = re.findall(pattern, content, re.IGNORECASE)
                if matches:
                    detections.append(f"{description} ({len(matches)} occurrences)")

            if detections:
                return True, detections

        except Exception:
            pass

        return False, None

    def check_entropy(self, filepath):
        """Check file entropy (high entropy may indicate encryption/packing)"""
        try:
            with open(filepath, 'rb') as f:
                data = f.read(1024 * 100)  # Read first 100KB

            if len(data) < 100:
                return False, None

            entropy = self.calculate_entropy(data)

            if entropy > self.entropy_threshold:
                return True, f"High entropy ({entropy:.2f}) - possibly encrypted/packed"

        except Exception:
            pass

        return False, None

    def check_pe_headers(self, filepath):
        """Check PE (Windows executable) headers for anomalies"""
        try:
            with open(filepath, 'rb') as f:
                # Check for PE signature
                f.seek(0)
                dos_header = f.read(2)

                if dos_header == b'MZ':
                    # This is a PE file
                    f.seek(60)
                    pe_offset = int.from_bytes(f.read(4), 'little')

                    f.seek(pe_offset)
                    pe_signature = f.read(4)

                    if pe_signature == b'PE\x00\x00':
                        return True, "Windows PE executable detected"

        except Exception:
            pass

        return False, None

    def scan_file(self, filepath):
        """Perform comprehensive scan on a file"""
        self.scanned_files += 1
        results = {
            'filepath': filepath,
            'filename': os.path.basename(filepath),
            'size': os.path.getsize(filepath),
            'detections': [],
            'risk_level': 'Clean'
        }

        # Check filename
        is_suspicious, reason = self.check_filename(filepath)
        if is_suspicious:
            results['detections'].append(('Filename', reason))

        # Check signature
        is_malware, reason = self.check_signature(filepath)
        if is_malware:
            results['detections'].append(('Signature', reason))
            results['risk_level'] = 'High'

        # Check content
        is_suspicious, reasons = self.check_file_content(filepath)
        if is_suspicious:
            for reason in reasons:
                results['detections'].append(('Content', reason))

        # Check entropy
        is_suspicious, reason = self.check_entropy(filepath)
        if is_suspicious:
            results['detections'].append(('Entropy', reason))

        # Check PE headers
        is_pe, reason = self.check_pe_headers(filepath)
        if is_pe:
            results['detections'].append(('File Type', reason))

        # Calculate risk level
        detection_count = len(results['detections'])
        if detection_count == 0:
            results['risk_level'] = 'Clean'
        elif detection_count <= 2:
            results['risk_level'] = 'Low'
        elif detection_count <= 4:
            results['risk_level'] = 'Medium'
        else:
            results['risk_level'] = 'High'

        if results['detections']:
            self.detections.append(results)

        return results

    def scan_directory(self, directory, recursive=True, max_files=100):
        """Scan all files in a directory"""
        print(f"\n[*] Scanning directory: {directory}")
        print(f"[*] Recursive: {recursive}")
        print(f"[*] Max files: {max_files}")
        print("="*70)

        scanned = 0
        path = Path(directory)

        try:
            if recursive:
                files = path.rglob('*')
            else:
                files = path.glob('*')

            for file in files:
                if scanned >= max_files:
                    print(f"\n[*] Reached maximum file limit ({max_files})")
                    break

                if file.is_file():
                    scanned += 1
                    print(f"\n[{scanned}] Scanning: {file}")

                    results = self.scan_file(str(file))

                    if results['detections']:
                        print(f"  ⚠️ Risk Level: {results['risk_level']}")
                        for category, detection in results['detections']:
                            print(f"    [{category}] {detection}")
                    else:
                        print(f"  ✓ Clean")

        except Exception as e:
            print(f"[!] Error scanning directory: {e}")

    def generate_report(self):
        """Generate malware detection report"""
        print("\n" + "="*70)
        print("MALWARE DETECTION REPORT")
        print("="*70)

        print(f"\nScan Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"Files Scanned: {self.scanned_files}")
        print(f"Detections: {len(self.detections)}")

        # Risk level breakdown
        risk_counts = {'Clean': 0, 'Low': 0, 'Medium': 0, 'High': 0}
        for detection in self.detections:
            risk_counts[detection['risk_level']] += 1

        print(f"\nRisk Level Breakdown:")
        print(f"  High:   {risk_counts['High']}")
        print(f"  Medium: {risk_counts['Medium']}")
        print(f"  Low:    {risk_counts['Low']}")

        # List high risk files
        high_risk = [d for d in self.detections if d['risk_level'] == 'High']
        if high_risk:
            print(f"\n--- HIGH RISK FILES ---")
            for detection in high_risk:
                print(f"\n  File: {detection['filepath']}")
                print(f"  Size: {detection['size']} bytes")
                print(f"  Detections:")
                for category, desc in detection['detections']:
                    print(f"    • [{category}] {desc}")

        # List medium risk files
        medium_risk = [d for d in self.detections if d['risk_level'] == 'Medium']
        if medium_risk:
            print(f"\n--- MEDIUM RISK FILES ---")
            for detection in medium_risk:
                print(f"\n  File: {detection['filepath']}")
                for category, desc in detection['detections']:
                    print(f"    • [{category}] {desc}")

        print("\n" + "="*70)
        print("RECOMMENDATIONS")
        print("="*70)

        if high_risk:
            print("\n⚠️ HIGH RISK files detected!")
            print("  1. Isolate these files immediately")
            print("  2. Run a full antivirus scan")
            print("  3. Review system logs for suspicious activity")
            print("  4. Consider professional malware analysis")
        elif medium_risk:
            print("\n⚠️ MEDIUM RISK files detected")
            print("  1. Review these files manually")
            print("  2. Check file sources and authenticity")
            print("  3. Consider running additional scans")
        else:
            print("\n✓ No high or medium risk files detected")
            print("  1. Continue regular security practices")
            print("  2. Keep systems updated")
            print("  3. Perform periodic scans")

        print("\n" + "="*70)

    def create_eicar_test_file(self):
        """Create EICAR test file for testing"""
        eicar_string = 'X5O!P%@AP[4\\PZX54(P^)7CC)7}$EICAR-STANDARD-ANTIVIRUS-TEST-FILE!$H+H*'

        with open('eicar_test.txt', 'w') as f:
            f.write(eicar_string)

        print("[*] EICAR test file created: eicar_test.txt")
        print("[*] This is a safe test file used to test antivirus software")


def main():
    """Main function"""
    print("="*70)
    print("MALWARE DETECTION TOOL")
    print("="*70)
    print("\n⚠️ EDUCATIONAL TOOL DISCLAIMER:")
    print("This is a basic malware detection tool for learning purposes.")
    print("It does NOT replace professional antivirus software.")
    print("Use in controlled environments only.\n")

    detector = MalwareDetector()

    while True:
        print("\nOptions:")
        print("  1. Scan single file")
        print("  2. Scan directory")
        print("  3. Scan directory (non-recursive)")
        print("  4. Generate report")
        print("  5. Create EICAR test file")
        print("  6. Exit")

        choice = input("\nSelect option: ").strip()

        if choice == '1':
            filepath = input("Enter file path: ").strip()
            if filepath and os.path.exists(filepath):
                print(f"\n[*] Scanning: {filepath}")
                results = detector.scan_file(filepath)

                print(f"\n--- Results ---")
                print(f"File: {results['filename']}")
                print(f"Size: {results['size']} bytes")
                print(f"Risk Level: {results['risk_level']}")

                if results['detections']:
                    print(f"\nDetections:")
                    for category, desc in results['detections']:
                        print(f"  • [{category}] {desc}")
                else:
                    print(f"\n✓ No threats detected")
            else:
                print("File not found")

        elif choice == '2':
            directory = input("Enter directory path: ").strip()
            if directory and os.path.exists(directory):
                max_files = input("Max files to scan (default 100): ").strip()
                max_files = int(max_files) if max_files else 100
                detector.scan_directory(directory, recursive=True, max_files=max_files)
            else:
                print("Directory not found")

        elif choice == '3':
            directory = input("Enter directory path: ").strip()
            if directory and os.path.exists(directory):
                max_files = input("Max files to scan (default 100): ").strip()
                max_files = int(max_files) if max_files else 100
                detector.scan_directory(directory, recursive=False, max_files=max_files)
            else:
                print("Directory not found")

        elif choice == '4':
            detector.generate_report()

        elif choice == '5':
            detector.create_eicar_test_file()
            print("\nYou can now scan this file to test the detector")

        elif choice == '6':
            print("\nGoodbye!")
            break

        else:
            print("Invalid option")


if __name__ == "__main__":
    main()
